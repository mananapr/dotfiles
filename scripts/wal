#!/usr/bin/env bash
#
# wol - Generate and change colorschemes on the fly.
#
# Created by Dylan Araps

# Speed up script by not using unicode.
export LC_ALL=C
export LANG=C

shopt -s nullglob nocasematch

# Internal variables.
cache_dir="${HOME}/.cache/wal"
newline="
"


# GENERATE COLORSCHEME


rand_img() {
    # Get the current wallpaper.
    old_wall="$(< "${cache_dir}/wal")"

    # Create an array of images and exclude the current wallpaper.
    files=("${wal%/}"/*.{png,jpg,jpeg})
    files=("${files[@]/"$old_wall"}")

    # Pick a random image.
    wal="${files[RANDOM % ${#files[@]}]}"

    # If the shuffle fails (rare) set the image to the first element.
    [[ ! -f "$wal" ]] && wal="${files[0]}"

    # Cache the wallpaper name
    printf "%s\n" "$wal" > "${cache_dir}/wal"
}

get_colors() {
    # Create the cache dir.
    mkdir -p "${cache_dir}/schemes"

    # Shuffle the image.
    [[ -d "$wal" ]] && rand_img

    # Check to see if wal was run from the -i dir.
    [[ ! "${wal%/*}" =~ / ]] && wal_dir="."

    # Find out the image's full path.
    img_dir="$(cd "${wal_dir:-${wal%/*}}" && pwd -P)/${wal##*/}"

    # Store cached colorscheme as 'dir-to-img.jpg'
    cache_file="${cache_dir}/schemes/${img_dir//\//-}"

    # Generate 16 colors from the image and save them to a file.
    if [[ -f "$cache_file" ]]; then
        colors=($(< "$cache_file"))
    else
        colors=($(convert "${wal}"  +dither -colors 16 -unique-colors txt:- | grep -E -o " \#.{6}"))

        # Cache the scheme.
        printf "%s\n" "${colors[@]}" > "$cache_file"
    fi

    # If imagemagick finds less than 16 colors, abort and warn the user.
    (( "${#colors[@]}" <= 15 )) && {
        out "Error: Imagemagick failed to generate a 16 color palette for ${wal##*/}"
        out "Error: Imagemagick could only generate a ${#colors[@]} color palette."
        out "Error: wal won't do guesswork to fill in the blanks."
        out "Error: Please try a different image."
        exit 1
    }

    out "colors: Generated colorscheme"
}


# SET COLORSCHEME


set_color() {
    sequences+="\033]4;${1};${2}\007"
    x_colors+="*color${1}: ${2}${newline}"
    sh_colors+="color${1}='${2}'${newline}"
    scss_colors+="\$color${1}: ${2};${newline}"
}

set_special() {
    sequences+="\033]${1};${2}\007"

    # Set X colors
    case "$1" in
        10) x_colors+="*foreground: ${2}${newline}" ;;
        11) x_colors+="*background: ${2}${newline}" ;;
        12) x_colors+="*cursor: ${2}${newline}" ;;
    esac
}

send_sequences() {
    # Create string of escape sequences to send to the terminals.
    set_special 10  "${colors[15]}"
    set_special 11  "${colors[0]}"
    set_special 12  "${colors[15]}"
    set_special 13  "${colors[15]}"
    set_special 14  "${colors[0]}"

    # This escape sequence doesn't work in VTE terminals.
    [[ -z "$VTE_VERSION" || "$vte" != "on" ]] && set_special 708 "${colors[0]}"

    set_color 0  "${colors[0]}"
    set_color 1  "${colors[9]}"
    set_color 2  "${colors[10]}"
    set_color 3  "${colors[11]}"
    set_color 4  "${colors[12]}"
    set_color 5  "${colors[13]}"
    set_color 6  "${colors[14]}"
    set_color 7  "${colors[15]}"
    set_color 9  "${colors[9]}"
    set_color 10 "${colors[10]}"
    set_color 11 "${colors[11]}"
    set_color 12 "${colors[12]}"
    set_color 13 "${colors[13]}"
    set_color 14 "${colors[14]}"
    set_color 15 "${colors[15]}"

    # Create a comment color based on the brightness of the background.
    case "${colors[0]:1:1}" in
        [0-1]) set_color 8 "#666666" ;;
        2)     set_color 8 "#757575" ;;
        [3-4]) set_color 8 "#999999" ;;
        5)     set_color 8 "#8a8a8a" ;;
        [6-9]) set_color 8 "#a1a1a1" ;;
        *)     set_color 8 "${colors[7]}" ;;
    esac

    # Directing output to /dev/pts/* allows you to send output to all open terminals
    # on your system.
    for term in /dev/pts/[0-9]*; do
        printf "%b" "$sequences" > "$term" &
    done

    out "colors: Set terminal colors"

    # Merge the colors into the X db so new terminals use them.
    xrdb -merge >/dev/null 2>&1 <<< "$x_colors" && \
        out "colors: Merged colors with X env"
}

set_wallpaper() {
    # Get desktop environment.
    de="${XDG_CURRENT_DESKTOP}"

    # Fallback to using xprop.
    [[ -z "$de" ]] && de="$(xprop -root | awk '/KDE_SESSION_VERSION|^_MUFFIN|xfce4|xfce5/')"

    case "$de" in
        *"MUFFIN"* | *"Cinnamon"*) gsettings set org.cinnamon.desktop.background picture-uri "file://${wal}" ;;
        *"MATE"*) gsettings set org.mate.background picture-filename "$wal" ;;
        *"XFCE"*) xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitor0/image-path --set "$wal" ;;
        *"GNOME"*) gsettings set org.gnome.desktop.background picture-uri "file://${wal}" ;;
        *)
            if type -p feh >/dev/null; then
                feh --bg-fill "$wal"

            elif type -p nitrogen >/dev/null; then
                nitrogen --set-zoom-fill "$wal"

            elif type -p bgs >/dev/null; then
                bgs "$wal"

            elif type -p hsetroot >/dev/null; then
                hsetroot -fill "$wal"

            elif type -p habak >/dev/null; then
                habak -mS "$wal"

            else
                gsettings set org.gnome.desktop.background picture-uri "file://${wal}"
            fi
        ;;
    esac

    out "wallpaper: Set new wallpaper"
}


# EXPORT COLORS


export_sequences() {
    printf "%s" "$sequences"
    out "export: Exported escape sequences"
}

export_envar() {
    printf "%s\n%s" "# wal - Colors generated by wal " "$sh_colors"
    out "export: Exported sh colors"
}

export_scss() {
    printf "%s\n%s" "// wal - Colors generated by wal " "$scss_colors"
    out "export: Exported scss color variables"
}

export_colors() {
    export_sequences > "${cache_dir}/colors"
    export_envar     > "${cache_dir}/colors.sh"
    export_scss      > "${cache_dir}/colors.scss"
}


# RELOAD COLORSCHEME

reload_colors() {
    # Source the current sequences
    sequences="$(< "${HOME}/.cache/wal/colors")"

    # If vte mode was used, remove the problem sequence.
    [[ "$VTE_VERSION" || "$vte" == "on" ]] && sequences="${sequences/??\]708\;\#??????}"

    printf "%b" "$sequences"
    exit
}

reload_env() {
    # Reload i3 if running.
    pgrep i3 && i3-msg reload &
}


# OTHER


out() {
    [[ "$quiet" != "on" ]] && printf "%s\n" "$1" >&2
}

usage() { printf "%s" "\
Usage: wal [OPTION] -i '/path/to/dir'
Example: wal -i '${HOME}/Pictures/Wallpapers/'
         wal -i '${HOME}/Pictures/1.jpg'

Flags:
  -c                      Delete all cached colorschemes.
  -h                      Display this help page.
  -i '/path/to/dir'       Which image to use.
     '/path/to/img.jpg'
  -o 'script_name'        External script to run after 'wal'.
  -q                      Quiet mode, don't print anything.
  -r                      Reload current colorscheme.
  -t                      Fix artifacts in VTE Terminals. (Termite, xfce4-terminal)

"
}

get_args() {
    while getopts ":chi:o:qrt" opt; do
        case "$opt" in
            "c") rm -rf "${cache_dir}/schemes"; exit ;;
            "h") usage; exit 1 ;;
            "i")
                if [[ -d "$OPTARG" || -f "$OPTARG" ]]; then
                    wal="$OPTARG"

                else
                    printf "%s\n" "Image/Directory doesn't exist: $OPTARG" >&2
                    exit 1
                fi
            ;;
            "o") external_script=("$OPTARG") ;;
            "q") quiet="on" ;;
            "r") reload="on" ;;
            "t") vte="on" ;;

            "?")
                printf "%s\n" "Invalid option: -$OPTARG" >&2
                exit 1
            ;;

            ":")
                printf "%s\n" "Option -$OPTARG requires an argument." >&2
                exit 1
            ;;
        esac
    done

    # Reload colors.
    [[ "$reload" == "on" ]] && reload_colors

    # Check if -i was used.
    if [[ -z "$wal" ]]; then
        printf "%s\n" "Error: 'wal' must be run with '-i'" >&2
        printf "%s\n" "Try 'wal -h' for more information." >&2
        exit 1
    fi
}


# FINISH UP


main () {
    get_args "$@"

    # Get 16 unique colors from the image.
    get_colors

    # Send the color changing sequences to every open terminal emulator.
    send_sequences

    # Set the wallpaper.
    set_wallpaper

    # Reload env
    reload_env >/dev/null 2>&1

    # Export the colors in other formats.
    export_colors

    # Execute custom script.
    type -p "${external_script[0]}" >/dev/null 2>&1 && "${external_script[@]}"
}

main "$@"
