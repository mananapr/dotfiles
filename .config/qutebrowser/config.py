# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Backend to use to display websites. qutebrowser supports two different
# web rendering engines / backends, QtWebKit and QtWebEngine. QtWebKit
# was discontinued by the Qt project with Qt 5.6, but picked up as a
# well maintained fork: https://github.com/annulen/webkit/wiki -
# qutebrowser only supports the fork. QtWebEngine is Qt's official
# successor to QtWebKit. It's slightly more resource hungry than
# QtWebKit and has a couple of missing features in qutebrowser, but is
# generally the preferred choice.
# Type: String
# Valid values:
#   - webengine: Use QtWebEngine (based on Chromium).
#   - webkit: Use QtWebKit (based on WebKit, similar to Safari).
c.backend = 'webengine'

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = False

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = False

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'always'

# Width (in pixels) of the progress indicator (0 to disable).
# Type: Int
c.tabs.indicator.width = 0

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://starshiptrooper.neocities.org/home'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://google.com/search?q={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://starshiptrooper.neocities.org/home'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = 'black'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = 'black'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = 'grey'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = 'grey'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '12ptRoboto'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = '12ptRoboto'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '12ptRoboto'

# Font used for the hints.
# Type: Font
c.fonts.hints = '12ptRoboto'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '12ptRoboto'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '12ptRoboto'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '12ptRoboto'

# Bindings for normal mode
config.bind('<Ctrl+i>', 'spawn mpv {url}')
config.bind('J', 'tab-prev')
config.bind('K', 'tab-next')
config.bind('xb', 'config-cycle statusbar.hide')
config.bind('xt', 'config-cycle tabs.show always switching')
config.bind('xx', 'config-cycle statusbar.hide ;; config-cycle tabs.show always switching')

# Bindings for insert mode
config.bind('<Ctrl+i>', 'spawn --userscript qute-keepass -p ~/Documents/Misc/keepass/Passwords.kdbx', mode='insert')
